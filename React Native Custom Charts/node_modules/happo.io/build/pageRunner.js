"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = pagesRunner;

var _perf_hooks = require("perf_hooks");

var _Logger = _interopRequireWildcard(require("./Logger"));

var _constructReport = _interopRequireDefault(require("./constructReport"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

async function pagesRunner({
  apiKey,
  apiSecret,
  endpoint,
  targets,
  pages,
  project
}, {
  isAsync
} = {}) {
  const logger = new _Logger.default();

  try {
    logger.info(`${(0, _Logger.logTag)(project)}Preparing job for remote execution...`);

    const outerStartTime = _perf_hooks.performance.now();

    const targetNames = Object.keys(targets);
    const tl = targetNames.length;
    logger.info(`${(0, _Logger.logTag)(project)}Generating screenshots in ${tl} target${tl > 1 ? 's' : ''}...`);
    const results = await Promise.all(targetNames.map(async name => {
      const startTime = _perf_hooks.performance.now();

      const result = await targets[name].execute({
        targetName: name,
        asyncResults: isAsync,
        pages,
        apiKey,
        apiSecret,
        endpoint
      });
      logger.start(`  - ${name}`, {
        startTime
      });
      logger.success();
      return {
        name,
        result
      };
    }));
    logger.start(undefined, {
      startTime: outerStartTime
    });
    logger.success();

    if (isAsync) {
      return results;
    }

    return (0, _constructReport.default)(results);
  } catch (e) {
    logger.fail();
    throw e;
  }
}