"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = loadUserConfig;

var _requestPromiseNative = _interopRequireDefault(require("request-promise-native"));

var _requireRelative = _interopRequireDefault(require("require-relative"));

var _Logger = _interopRequireDefault(require("./Logger"));

var _WrappedError = _interopRequireDefault(require("./WrappedError"));

var defaultConfig = _interopRequireWildcard(require("./DEFAULTS"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

async function load(pathToConfigFile) {
  try {
    let userConfig = (0, _requireRelative.default)(pathToConfigFile, process.cwd()); // await if the config is a function, async or not

    if (typeof userConfig === 'function') {
      userConfig = await userConfig();
    }

    return _objectSpread(_objectSpread({}, defaultConfig), userConfig);
  } catch (e) {
    // We only check for the default config file here, so that a missing custom
    // config path isn't ignored.
    if (e.message && /Cannot find.*\.happo\.js/.test(e.message)) {
      return defaultConfig;
    }

    throw new Error(e);
  }
}

async function getPullRequestSecret({
  endpoint
}, env) {
  const {
    secret
  } = await (0, _requestPromiseNative.default)({
    url: `${endpoint}/api/pull-request-token`,
    method: 'POST',
    json: true,
    body: {
      prUrl: env.CHANGE_URL
    }
  });
  return secret;
}

async function loadUserConfig(pathToConfigFile, env = process.env) {
  const {
    CHANGE_URL,
    HAPPO_CONFIG_FILE
  } = env;

  if (HAPPO_CONFIG_FILE) {
    pathToConfigFile = HAPPO_CONFIG_FILE;
  }

  const config = await load(pathToConfigFile);

  if (!config.apiKey || !config.apiSecret) {
    if (!CHANGE_URL) {
      throw new Error('You need an `apiKey` and `apiSecret` in your config. ' + 'To obtain one, go to https://happo.io/settings');
    }

    try {
      // Reassign api tokens to temporary ones provided for the PR
      new _Logger.default().info('No `apiKey` or `apiSecret` found in config. Falling back to pull-request authentication.');
      config.apiKey = CHANGE_URL;
      config.apiSecret = await getPullRequestSecret(config, env);
    } catch (e) {
      throw new _WrappedError.default('Failed to obtain temporary pull-request token', e);
    }
  }

  if (!config.targets || Object.keys(config.targets).length === 0) {
    throw new Error('You need at least one target defined under `targets`. ' + 'See https://github.com/happo/happo.io#targets for more info.');
  }

  const defaultKeys = Object.keys(defaultConfig);
  const usedKeys = Object.keys(config);
  usedKeys.forEach(key => {
    if (!defaultKeys.includes(key)) {
      new _Logger.default().warn(`Unknown config key used in .happo.js: "${key}"`);
    }
  });
  config.publicFolders.push(config.tmpdir);
  config.plugins.forEach(({
    publicFolders
  }) => {
    if (publicFolders) {
      config.publicFolders.push(...publicFolders);
    }
  });
  return config;
}