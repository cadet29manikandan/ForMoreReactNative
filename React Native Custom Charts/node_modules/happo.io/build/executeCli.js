"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = executeCli;

var _commander = _interopRequireDefault(require("commander"));

var _DEFAULTS = require("./DEFAULTS");

var _Logger = _interopRequireDefault(require("./Logger"));

var _compareReports = _interopRequireDefault(require("./commands/compareReports"));

var _dev = _interopRequireDefault(require("./commands/dev"));

var _generateDevSha = _interopRequireDefault(require("./generateDevSha"));

var _hasReport = _interopRequireDefault(require("./commands/hasReport"));

var _loadUserConfig = _interopRequireDefault(require("./loadUserConfig"));

var _package = _interopRequireDefault(require("../package.json"));

var _debug = _interopRequireDefault(require("./commands/debug"));

var _run = _interopRequireDefault(require("./commands/run"));

var _startJob = _interopRequireDefault(require("./commands/startJob"));

var _postGithubComment = _interopRequireDefault(require("./postGithubComment"));

var _uploadReport = _interopRequireDefault(require("./uploadReport"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const {
  HAPPO_NOTIFY,
  HAPPO_IS_ASYNC: RAW_HAPPO_IS_ASYNC
} = process.env;
const HAPPO_IS_ASYNC = RAW_HAPPO_IS_ASYNC === 'true';

_commander.default.version(_package.default.version).option('-c, --config <path>', 'set config path', _DEFAULTS.configFile).option('-o, --only <component>', 'limit to one component').option('-l, --link <url>', 'provide a link back to the commit').option('-a, --async', 'process reports/comparisons asynchronously').option('-n, --notify <emails>', 'one or more (comma-separated) email addresses to notify with results').option('-m, --message <message>', 'associate the run with a message (e.g. commit subject)').option('-a, --author <email>', 'the author of the commit').option('--debug-port <port>', 'the port where the debug server listens').option('--debug-port <port>', 'the port where the debug server listens').option('--dry-run', 'makes the `happo compare` call non-destructive when running with a `compareThreshold` config option').usage('[options]');

_commander.default.command('run [sha]').description('execute a full happo run').action(async sha => {
  let usedSha = sha || (0, _generateDevSha.default)();

  if (!sha) {
    new _Logger.default().info(`No [sha] provided. A temporary one will be used in place: "${usedSha}".`);
  }

  if (_commander.default.only) {
    usedSha = `${usedSha}-${_commander.default.only}`;
  }

  const isAsync = _commander.default.async || HAPPO_IS_ASYNC;
  await (0, _run.default)(usedSha, await (0, _loadUserConfig.default)(_commander.default.config), {
    only: _commander.default.only,
    link: _commander.default.link,
    isAsync,
    message: _commander.default.message
  });
  process.exit(0);
});

_commander.default.command('dev').description('start dev mode').action(async () => {
  await (0, _dev.default)(await (0, _loadUserConfig.default)(_commander.default.config), {
    only: _commander.default.only
  });
});

_commander.default.command('debug').description('start a local server where you can debug happo examples').action(async () => {
  (0, _debug.default)({
    port: _commander.default.debugPort
  }, await (0, _loadUserConfig.default)(_commander.default.config));
});

_commander.default.command('has-report <sha>').description('check if there is a report for a specific sha').action(async sha => {
  if (await (0, _hasReport.default)(sha, await (0, _loadUserConfig.default)(_commander.default.config))) {
    process.exit(0);
  } else {
    process.exit(1);
  }
});

_commander.default.command('empty <sha>').description('mark a report as empty').action(async sha => {
  await (0, _uploadReport.default)(Object.assign({
    snaps: [],
    sha
  }, await (0, _loadUserConfig.default)(_commander.default.config)));
  process.exit(0);
});

_commander.default.command('compare <sha1> <sha2>').description('compare reports for two different shas').action(async (sha1, sha2) => {
  const config = await (0, _loadUserConfig.default)(_commander.default.config);
  const isAsync = _commander.default.async || HAPPO_IS_ASYNC;
  const notify = _commander.default.notify || HAPPO_NOTIFY;
  const result = await (0, _compareReports.default)(sha1, sha2, config, {
    link: _commander.default.link,
    message: _commander.default.message,
    author: _commander.default.author,
    dryRun: _commander.default.dryRun,
    notify,
    isAsync
  });

  if (isAsync) {
    new _Logger.default().info(`Async comparison created with ID=${result.id}`);
    process.exit(0);
  }

  if (_commander.default.link && process.env.HAPPO_GITHUB_USER_CREDENTIALS) {
    await (0, _postGithubComment.default)({
      link: _commander.default.link,
      statusImageUrl: result.statusImageUrl,
      compareUrl: result.compareUrl,
      githubApiUrl: config.githubApiUrl
    });
  }

  new _Logger.default().info(result.summary);

  if (result.equal) {
    process.exit(0);
  } else {
    process.exit(113);
  }
});

_commander.default.command('start-job <sha1> <sha2>').description('start a job (used by happo-ci script)').action(async (sha1, sha2) => {
  const result = await (0, _startJob.default)(sha1, sha2, {
    link: _commander.default.link,
    message: _commander.default.message
  }, await (0, _loadUserConfig.default)(_commander.default.config));
  new _Logger.default().info(result.id);
});

_commander.default.on('command:*', cmd => {
  console.log(`Invalid command: "${cmd}"\n`);

  _commander.default.outputHelp();

  process.exit(1);
});

function executeCli(argv) {
  if (!argv.slice(2).length) {
    _commander.default.outputHelp();

    process.exit(1);
    return;
  }

  return _commander.default.parse(argv);
}