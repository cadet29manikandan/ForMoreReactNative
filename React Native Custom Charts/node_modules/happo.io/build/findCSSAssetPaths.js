"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = findCSSAssetPaths;

var _path = _interopRequireDefault(require("path"));

var _stringPrototype = _interopRequireDefault(require("string.prototype.matchall"));

var _stripQueryStringAndHash = _interopRequireDefault(require("./stripQueryStringAndHash"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const URL_PATTERN = /url\(['"]?(\/?[^)"']+)['"]?\)/g;
/**
 * @param {string} css - The css code, e.g. ".foo { background: url(/foo.png); }"
 * @param {string} [source] - An optional path to the css file where the css is
 *   coming from. This is used to make the resulting `resolvePath` relative to
 *   the css file.
 * @return {object} an object containing an `assetPath` and a `resolvePath`. The
 *   assetPath is the path as it's described in the css. The resolvePath is the
 *   path where we should attempt to locate the file in the filesystem.
 */

function findCSSAssetPaths({
  css,
  source
}) {
  const paths = Array.from((0, _stringPrototype.default)(css, URL_PATTERN)).map(match => match[1]).filter(url => !/^http|\/\//.test(url)).map(_stripQueryStringAndHash.default);

  if (!source) {
    return paths.map(p => ({
      assetPath: p,
      resolvePath: p
    }));
  }

  const dir = _path.default.dirname(source);

  return paths.map(url => {
    if (url.startsWith('/')) {
      // absolute url
      return {
        assetPath: url,
        resolvePath: url
      };
    }

    const assetPath = _path.default.join(dir, url);

    return {
      assetPath,
      resolvePath: url
    };
  });
}