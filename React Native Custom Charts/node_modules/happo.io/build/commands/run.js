"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = runCommand;

var _mkdirp = _interopRequireDefault(require("mkdirp"));

var _rimraf = _interopRequireDefault(require("rimraf"));

var _Logger = _interopRequireWildcard(require("../Logger"));

var _domRunner = _interopRequireDefault(require("../domRunner"));

var _makeRequest = _interopRequireDefault(require("../makeRequest"));

var _pageRunner = _interopRequireDefault(require("../pageRunner"));

var _remoteRunner = _interopRequireDefault(require("../remoteRunner"));

var _uploadReport = _interopRequireDefault(require("../uploadReport"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function runCommand(sha, config, {
  only,
  link,
  message,
  isAsync
}) {
  const logger = new _Logger.default();
  const {
    apiKey,
    apiSecret,
    endpoint,
    project,
    plugins,
    pages
  } = config;

  _rimraf.default.sync(config.tmpdir);

  _mkdirp.default.sync(config.tmpdir);

  const staticPlugin = plugins.find(plugin => typeof plugin.generateStaticPackage === 'function');
  let result;

  if (pages) {
    result = await (0, _pageRunner.default)(config, {
      isAsync
    });
  } else if (staticPlugin) {
    result = await (0, _remoteRunner.default)(config, staticPlugin, {
      isAsync
    });
  } else {
    result = await (0, _domRunner.default)(config, {
      only,
      isAsync
    });
  }

  if (isAsync) {
    logger.start(`${(0, _Logger.logTag)(project)}Creating async report for ${sha}...`);
    const allRequestIds = [];
    result.forEach(item => allRequestIds.push(...item.result));
    const {
      id
    } = await (0, _makeRequest.default)({
      url: `${endpoint}/api/async-reports/${sha}`,
      method: 'POST',
      json: true,
      body: {
        requestIds: allRequestIds,
        link,
        message,
        project
      }
    }, {
      endpoint,
      apiKey,
      apiSecret,
      maxTries: 3
    });
    logger.success();
    logger.info(`${(0, _Logger.logTag)(project)}Async report id: ${id}`);
  } else {
    logger.start(`${(0, _Logger.logTag)(project)}Uploading report for ${sha}...`);
    const {
      url
    } = await (0, _uploadReport.default)({
      snaps: result,
      sha,
      endpoint,
      apiKey,
      apiSecret,
      link,
      message,
      project
    });
    logger.success();
    logger.info(`${(0, _Logger.logTag)(project)}View results at ${url}`);
  }

  logger.info(`${(0, _Logger.logTag)(project)}Done ${sha}`);
}