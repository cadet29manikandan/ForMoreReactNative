"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = devCommand;

var _mkdirp = _interopRequireDefault(require("mkdirp"));

var _rimraf = _interopRequireDefault(require("rimraf"));

var _Logger = _interopRequireDefault(require("../Logger"));

var _compareReports = _interopRequireDefault(require("./compareReports"));

var _domRunner = _interopRequireDefault(require("../domRunner"));

var _generateDevSha = _interopRequireDefault(require("../generateDevSha"));

var _uploadReport = _interopRequireDefault(require("../uploadReport"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function indent(str) {
  return str.replace(/^/gm, ' ');
}

async function devCommand(config, {
  only
}) {
  const {
    apiKey,
    apiSecret,
    endpoint,
    project
  } = config;
  let baselineSha;
  const logger = new _Logger.default();

  _rimraf.default.sync(config.tmpdir);

  _mkdirp.default.sync(config.tmpdir);

  (0, _domRunner.default)(config, {
    only,
    onReady: async snaps => {
      const sha = (0, _generateDevSha.default)();
      logger.start(`Preparing report (${sha})...`);
      const {
        url
      } = await (0, _uploadReport.default)({
        snaps,
        sha,
        endpoint,
        apiKey,
        apiSecret,
        project
      });
      logger.success();
      logger.info(`View results at ${url}`);

      if (baselineSha) {
        logger.start('Comparing with baseline report...');
        const result = await (0, _compareReports.default)(baselineSha, sha, {
          apiKey,
          apiSecret,
          endpoint,
          project
        }, {});
        logger.success();
        logger.info(`\n${indent(result.summary)}`);
      } else {
        baselineSha = sha;
      }
    }
  });
}