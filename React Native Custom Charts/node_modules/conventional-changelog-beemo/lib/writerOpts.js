"use strict";
/* eslint-disable sort-keys, no-param-reassign */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const getTypeGroup_1 = __importDefault(require("./getTypeGroup"));
const constants_1 = require("./constants");
const groupEmojis = constants_1.GROUPS.reduce((data, group) => ({
    ...data,
    [group.label]: group.emoji,
}), {});
const sortWeights = {
    Release: 4,
    Breaking: 3,
    Updates: 2,
    Fixes: 1,
    Security: 0,
    Styles: -1,
    Types: -1,
    Docs: -2,
    Dependencies: -3,
    Misc: -3,
    Reverts: -4,
    Internals: -5,
};
function createLink(paths, context, reference = {}) {
    const owner = reference.owner || context.owner;
    const repository = reference.repository || context.repository;
    const url = [];
    if (repository) {
        if (context.host) {
            url.push(context.host);
        }
        if (owner) {
            url.push(owner);
        }
        url.push(repository);
    }
    else {
        url.push(context.repoUrl);
    }
    let base = url.join('/');
    // If deep linking to a sub-folder (monorepo project, etc),
    // extract the base URL if possible.
    [
        // github, gitlab
        'tree',
        'blob',
        // bitbucket
        'src',
    ].forEach(browsePart => {
        if (base.includes(`/${browsePart}/`)) {
            [base] = base.split(`/${browsePart}/`);
        }
    });
    return [base, ...paths].join('/');
}
const options = {
    mainTemplate: fs_1.default.readFileSync(path_1.default.join(__dirname, '../templates/template.hbs'), 'utf-8'),
    commitPartial: fs_1.default.readFileSync(path_1.default.join(__dirname, '../templates/commit.hbs'), 'utf-8'),
    headerPartial: fs_1.default.readFileSync(path_1.default.join(__dirname, '../templates/header.hbs'), 'utf-8'),
    footerPartial: fs_1.default.readFileSync(path_1.default.join(__dirname, '../templates/footer.hbs'), 'utf-8'),
    // Commits
    groupBy: 'label',
    commitsSort: ['scope', 'message'],
    commitGroupsSort(groupA, groupB) {
        const aWeight = sortWeights[groupA.title] || 0;
        const bWeight = sortWeights[groupB.title] || 0;
        if (aWeight === 0 && bWeight === 0) {
            return groupA.title.localeCompare(groupB.title);
        }
        return bWeight - aWeight;
    },
    // Notes
    noteGroupsSort: 'title',
    // Add metadata
    transform(commit, context) {
        context.groupEmojis = groupEmojis;
        if (!commit.type) {
            return undefined;
        }
        // Use consistent values for snapshots
        if (process.env.NODE_ENV === 'test') {
            commit.hash = 'a1b2c3d';
            context.date = '2019-02-26';
        }
        // Override type for specific scenarios
        if (commit.revert) {
            commit.type = 'revert';
        }
        else if (commit.merge) {
            commit.type = 'misc';
        }
        // Define metadata based on type
        const group = getTypeGroup_1.default(commit.type);
        commit.label = group.label;
        if (group.bump === 'major') {
            context.isMajor = true;
        }
        else if (group.bump === 'minor') {
            context.isMinor = true;
        }
        // Use shorthand hashes
        if (typeof commit.hash === 'string') {
            // eslint-disable-next-line no-magic-numbers
            commit.hash = commit.hash.slice(0, 7);
        }
        // Pre-generate links instead of doing it in handlebars
        commit.hashLink = createLink([context.commit, commit.hash], context);
        commit.references.forEach(reference => {
            reference.issueLink = createLink([context.issue, reference.issue], context, reference);
            let source = `${reference.repository || ''}#${reference.issue}`;
            if (reference.owner) {
                source = `${reference.owner}/${source}`;
            }
            reference.source = source;
        });
        // Link users
        if (context.host) {
            commit.message = commit.message.replace(/\B@([a-z0-9](?:-?[a-z0-9/]){0,38})/gu, (match, username, index) => {
                if (username.includes('/') ||
                    // Avoid when wrapped in backticks (inline code)
                    commit.message.charAt(index - 1) === '`' ||
                    commit.message.charAt(index + match.length + 1) === '`') {
                    return match;
                }
                return `[@${username}](${context.host}/${username})`;
            });
        }
        return commit;
    },
};
exports.default = options;
