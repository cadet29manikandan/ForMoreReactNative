"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const rimraf_1 = __importDefault(require("rimraf"));
const core_1 = require("@beemo/core");
// Success: Writes file list to stdout
// Failure: Throws SyntaxError to stderr
class BabelDriver extends core_1.Driver {
    constructor() {
        super(...arguments);
        /**
         * Automatically clean the target folder if --out-dir is used.
         */
        this.handleCleanTarget = ({ args }) => {
            if (args.clean && args.outDir) {
                rimraf_1.default.sync(core_1.Path.resolve(args.outDir).path());
            }
            return Promise.resolve();
        };
    }
    bootstrap() {
        this.setMetadata({
            bin: 'babel',
            configName: 'babel.config.js',
            configOption: '--config-file',
            description: this.tool.msg('app:babelDescription'),
            title: 'Babel',
            watchOptions: ['-w', '--watch'],
        });
        this.setCommandOptions({
            clean: {
                boolean: true,
                default: false,
                description: this.tool.msg('app:babelCleanOption'),
            },
        });
        this.onBeforeExecute.listen(this.handleCleanTarget);
    }
    extractErrorMessage(error) {
        if (error.message.includes('SyntaxError')) {
            return error.message.split(/|\s+at/u, 1)[0];
        }
        return super.extractErrorMessage(error);
    }
}
exports.default = BabelDriver;
