import { Event } from '@boost/event';
import { Driver, DriverArgs, DriverContext, Path, Predicates, ConfigContext, ConfigArgs } from '@beemo/core';
import { TypeScriptDriverArgs, TypeScriptConfig, TypeScriptOptions } from './types';
export default class TypeScriptDriver extends Driver<TypeScriptConfig, TypeScriptOptions> {
    onCreateProjectConfigFile: Event<[ConfigContext<ConfigArgs>, Path, TypeScriptConfig, boolean], string>;
    blueprint(preds: Predicates): any;
    bootstrap(): void;
    /**
     * Create a `tsconfig.json` in each workspace package. Automatically link packages
     * together using project references. Attempt to handle source and test folders.
     */
    createProjectRefConfigsInWorkspaces(context: DriverContext<DriverArgs & TypeScriptDriverArgs>, workspaceRoot: Path): Promise<unknown>;
    /**
     * Extract compiler options from the root config into a separate config purely for
     * extending options. Update the root config with references to all workspaces.
     */
    prepareProjectRefsRootConfigs(workspaceRoot: Path, configPath: Path, config: TypeScriptConfig): Path;
    /**
     * Automatically clean the target folder if `outDir` and `--clean` is used.
     */
    private handleCleanTarget;
    /**
     * Define references and compiler options when `--reference-workspaces` option is passed.
     */
    private handlePrepareConfigs;
    /**
     * Automatically create `tsconfig.json` files in each workspace package with project
     * references linked correctly. Requires the `--reference-workspaces` option.
     */
    private handleProjectReferences;
}
//# sourceMappingURL=TypeScriptDriver.d.ts.map