"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const event_1 = require("@boost/event");
const core_1 = require("@beemo/core");
// Success: Writes file list to stdout
// Failure: Writes to stderr for no files found and syntax errors
class PrettierDriver extends core_1.Driver {
    constructor() {
        super(...arguments);
        this.onCreateIgnoreFile = new event_1.Event('create-ignore-file');
        /**
         * If an "ignore" property exists in the Prettier config, create an ".prettierconfig" file.
         */
        this.handleCreateIgnoreFile = (context, configPath, config) => {
            if (!config.ignore) {
                return;
            }
            if (!Array.isArray(config.ignore)) {
                throw new TypeError(this.tool.msg('errors:prettierIgnoreInvalid'));
            }
            const ignorePath = configPath.parent().append('.prettierignore');
            const { ignore = [] } = config;
            this.onCreateIgnoreFile.emit([context, ignorePath, { ignore }]);
            fs_1.default.writeFileSync(ignorePath.path(), ignore.join('\n'));
            // Add to context so that it can be automatically cleaned up
            context.addConfigPath('prettier', ignorePath);
            // Delete the property
            delete config.ignore;
        };
    }
    bootstrap() {
        this.setMetadata({
            bin: 'prettier',
            configName: 'prettier.config.js',
            description: this.tool.msg('app:prettierDescription'),
            title: 'Prettier',
        });
        this.onCreateConfigFile.listen(this.handleCreateIgnoreFile);
    }
    extractErrorMessage(error) {
        if (error.message.includes('SyntaxError')) {
            return error.message.split(/|\s+$/u, 1)[0];
        }
        return super.extractErrorMessage(error);
    }
}
exports.default = PrettierDriver;
