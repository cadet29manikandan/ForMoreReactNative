"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@boost/core");
const event_1 = require("@boost/event");
const execa_1 = __importDefault(require("execa"));
class Script extends core_1.Plugin {
    constructor() {
        super(...arguments);
        this.tasks = [];
        this.onBeforeExecute = new event_1.ConcurrentEvent('before-execute');
        this.onAfterExecute = new event_1.ConcurrentEvent('after-execute');
        this.onFailedExecute = new event_1.ConcurrentEvent('failed-execute');
    }
    /**
     * Define a configuration object to parse args with.
     */
    args() {
        return {};
    }
    /**
     * Execute the script with the context and parsed args.
     */
    execute(context, args) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.executeTasks('serial');
        });
    }
    /**
     * Execute a command with the given arguments and pass the results through a promise.
     */
    executeCommand(command, args, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return execa_1.default(command, args, options);
        });
    }
    /**
     * Execute the enqueued tasks using the defined process.
     */
    executeTasks(type) {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.resolve({
                tasks: this.tasks,
                type,
            });
        });
    }
    /**
     * Define an individual task that will be piped to an upstream routine.
     */
    task(title, action) {
        if (typeof action !== 'function') {
            throw new TypeError(this.tool.msg('errors:taskRequireAction'));
        }
        const task = new core_1.Task(title, action);
        this.tasks.push(task);
        return task;
    }
}
exports.default = Script;
