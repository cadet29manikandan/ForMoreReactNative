/// <reference types="yargs" />
import { Path, FilePath } from '@boost/common';
import { Context as BaseContext } from '@boost/core';
import { Arguments, Argv } from '../types';
export interface ConfigPath {
    driver: string;
    path: Path;
}
export default class Context<T = {}> extends BaseContext {
    args: Arguments<T>;
    argv: Argv;
    configPaths: ConfigPath[];
    cwd: Path;
    moduleRoot: Path;
    workspaceRoot: Path;
    workspaces: FilePath[];
    constructor(args: Arguments<T>);
    /**
     * Add a positional argument to the argv list.
     */
    addArg(arg: string): this;
    /**
     * Add multiple positional arguments.
     */
    addArgs(args: string[]): this;
    /**
     * Add a config path for the defined driver.
     */
    addConfigPath(driverName: string, path: Path): this;
    /**
     * Add an option argument to both the args object and argv list.
     */
    addOption(arg: string, defaultValue?: unknown, useEquals?: boolean): this;
    /**
     * Add multiple boolean option arguments.
     */
    addOptions(args: string[]): this;
    /**
     * Find a configuration path by file name.
     */
    findConfigByName(name: string): ConfigPath | undefined;
    /**
     * Return an argument or option value by name, or a fallback value if not found.
     */
    getArg(name: string, fallback?: unknown): unknown;
}
//# sourceMappingURL=Context.d.ts.map