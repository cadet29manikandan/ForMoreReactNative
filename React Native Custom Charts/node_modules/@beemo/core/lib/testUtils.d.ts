import execa from 'execa';
import { Arguments } from 'yargs';
import { Path } from '@boost/common';
import { mockDebugger, stubArgs } from '@boost/core/test-utils';
import Beemo from './Beemo';
import Driver from './Driver';
import Script from './Script';
import Context from './contexts/Context';
import ConfigContext, { ConfigArgs } from './contexts/ConfigContext';
import DriverContext, { DriverArgs } from './contexts/DriverContext';
import ScaffoldContext, { ScaffoldArgs } from './contexts/ScaffoldContext';
import ScriptContext, { ScriptArgs } from './contexts/ScriptContext';
import { DriverMetadata, Argv } from './types';
export { mockDebugger, stubArgs };
export declare class TestDriver<T extends object = {}> extends Driver<T> {
    name: string;
}
export declare class TestScript<A extends object = {}, T extends object = {}> extends Script<A, T> {
    name: string;
    blueprint(): any;
}
export declare const BEEMO_APP_PATH: Path;
export declare const BEEMO_TEST_ROOT: Path;
export declare function mockTool(argv?: Argv): Beemo;
export declare function mockDriver<C extends object = {}>(name: string, tool?: Beemo | null, metadata?: Partial<DriverMetadata>, boot?: boolean): Driver<C>;
export declare function mockScript<C extends object = {}>(name: string, tool?: Beemo | null): Script<{}, C>;
export declare function applyContext<T extends Context>(context: T): T;
export declare function stubContext(): Context;
export declare function stubConfigArgs(fields?: Partial<ConfigArgs>): Arguments<ConfigArgs>;
export declare function stubConfigContext(): ConfigContext;
export declare function stubDriverArgs(fields?: Partial<DriverArgs>): Arguments<DriverArgs>;
export declare function stubDriverContext(driver?: Driver): DriverContext;
export declare function stubScaffoldArgs(fields?: Partial<ScaffoldArgs>): Arguments<ScaffoldArgs>;
export declare function stubScaffoldContext(generator?: string, action?: string, name?: string): ScaffoldContext;
export declare function stubScriptArgs(fields?: Partial<ScriptArgs>): Arguments<ScriptArgs>;
export declare function stubScriptContext(script?: Script): ScriptContext;
export declare function stubExecResult(fields?: Partial<execa.ExecaReturnValue>): execa.ExecaReturnValue;
export declare function prependRoot(part: string): Path;
export declare function getRoot(): Path;
//# sourceMappingURL=testUtils.d.ts.map