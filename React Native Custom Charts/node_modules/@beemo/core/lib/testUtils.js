"use strict";
/* eslint-disable max-classes-per-file */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const yargs_parser_1 = __importDefault(require("yargs-parser"));
const common_1 = require("@boost/common");
const test_utils_1 = require("@boost/core/test-utils");
exports.mockDebugger = test_utils_1.mockDebugger;
exports.stubArgs = test_utils_1.stubArgs;
const Beemo_1 = __importDefault(require("./Beemo"));
const Driver_1 = __importDefault(require("./Driver"));
const Script_1 = __importDefault(require("./Script"));
const Context_1 = __importDefault(require("./contexts/Context"));
const ConfigContext_1 = __importDefault(require("./contexts/ConfigContext"));
const DriverContext_1 = __importDefault(require("./contexts/DriverContext"));
const ScaffoldContext_1 = __importDefault(require("./contexts/ScaffoldContext"));
const ScriptContext_1 = __importDefault(require("./contexts/ScriptContext"));
class TestDriver extends Driver_1.default {
    constructor() {
        super(...arguments);
        this.name = 'test-driver';
    }
}
exports.TestDriver = TestDriver;
class TestScript extends Script_1.default {
    constructor() {
        super(...arguments);
        this.name = 'test-script';
    }
    blueprint() {
        // eslint-disable-next-line
        return {};
    }
}
exports.TestScript = TestScript;
// Use core package since resources are located here
exports.BEEMO_APP_PATH = common_1.Path.resolve('..', __dirname);
// Use a folder that should not cause issues / contain much code
exports.BEEMO_TEST_ROOT = common_1.Path.resolve('../../../tests', __dirname);
function mockTool(argv = []) {
    const tool = new Beemo_1.default(argv, '', true);
    Object.assign(tool.options, {
        appName: 'beemo',
        appPath: exports.BEEMO_APP_PATH.path(),
        root: exports.BEEMO_TEST_ROOT.path(),
        workspaceRoot: exports.BEEMO_TEST_ROOT.path(),
    });
    tool.config = test_utils_1.stubToolConfig({
        configure: {
            cleanup: false,
            parallel: true,
        },
        drivers: [],
        execute: {
            concurrency: 0,
            graph: true,
        },
        module: 'test-module',
        scripts: [],
    });
    return tool;
}
exports.mockTool = mockTool;
function mockDriver(name, tool = null, metadata = {}, boot = true) {
    const driver = new TestDriver();
    driver.name = name;
    driver.tool = tool || mockTool();
    driver.setMetadata(Object.assign({ bin: name.toLowerCase(), configName: `${name}.json`, title: name }, metadata));
    if (boot) {
        driver.bootstrap();
    }
    return driver;
}
exports.mockDriver = mockDriver;
function mockScript(name, tool = null) {
    const script = new TestScript();
    script.name = name;
    script.tool = tool || mockTool();
    return script;
}
exports.mockScript = mockScript;
function applyContext(context) {
    context.args = yargs_parser_1.default(['-a', '--foo', 'bar', 'baz']);
    context.argv = ['-a', '--foo', 'bar', 'baz'];
    context.cwd = exports.BEEMO_TEST_ROOT;
    context.moduleRoot = exports.BEEMO_TEST_ROOT;
    context.workspaceRoot = exports.BEEMO_TEST_ROOT;
    context.workspaces = [];
    return context;
}
exports.applyContext = applyContext;
function stubContext() {
    return applyContext(new Context_1.default(test_utils_1.stubArgs()));
}
exports.stubContext = stubContext;
function stubConfigArgs(fields) {
    return test_utils_1.stubArgs(Object.assign({ names: [] }, fields));
}
exports.stubConfigArgs = stubConfigArgs;
function stubConfigContext() {
    return applyContext(new ConfigContext_1.default(stubConfigArgs()));
}
exports.stubConfigContext = stubConfigContext;
function stubDriverArgs(fields) {
    return test_utils_1.stubArgs(Object.assign({ concurrency: 1, graph: false, stdio: 'buffer', workspaces: '' }, fields));
}
exports.stubDriverArgs = stubDriverArgs;
function stubDriverContext(driver) {
    return applyContext(new DriverContext_1.default(stubDriverArgs(), driver || new TestDriver()));
}
exports.stubDriverContext = stubDriverContext;
function stubScaffoldArgs(fields) {
    return test_utils_1.stubArgs(Object.assign({ action: '', dry: false, generator: '', name: '' }, fields));
}
exports.stubScaffoldArgs = stubScaffoldArgs;
function stubScaffoldContext(generator = 'generator', action = 'action', name = '') {
    return applyContext(new ScaffoldContext_1.default(stubScaffoldArgs(), generator, action, name));
}
exports.stubScaffoldContext = stubScaffoldContext;
function stubScriptArgs(fields) {
    return test_utils_1.stubArgs(Object.assign({ concurrency: 1, graph: false, name: 'foo', stdio: 'buffer', workspaces: '' }, fields));
}
exports.stubScriptArgs = stubScriptArgs;
function stubScriptContext(script) {
    const context = applyContext(new ScriptContext_1.default(stubScriptArgs(), 'script'));
    if (script) {
        context.setScript(script, './script.js');
    }
    return context;
}
exports.stubScriptContext = stubScriptContext;
function stubExecResult(fields) {
    return Object.assign({ all: '', command: '', exitCode: 0, failed: false, isCanceled: false, killed: false, signal: undefined, stderr: '', stdout: '', timedOut: false }, fields);
}
exports.stubExecResult = stubExecResult;
function prependRoot(part) {
    return exports.BEEMO_TEST_ROOT.append(part);
}
exports.prependRoot = prependRoot;
function getRoot() {
    return exports.BEEMO_TEST_ROOT;
}
exports.getRoot = getRoot;
