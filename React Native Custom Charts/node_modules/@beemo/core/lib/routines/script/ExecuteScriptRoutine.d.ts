import { Routine, Task, Predicates } from '@boost/core';
import { Arguments } from 'yargs-parser';
import Beemo from '../../Beemo';
import Script from '../../Script';
import ScriptContext from '../../contexts/ScriptContext';
import { ExecuteType } from '../../types';
export interface ExecuteScriptOptions {
    packageRoot?: string;
}
export default class ExecuteScriptRoutine extends Routine<ScriptContext, Beemo, ExecuteScriptOptions> {
    blueprint({ string }: Predicates): {
        packageRoot: import("optimal").StringPredicate<string>;
    };
    /**
     * Run the script while also parsing arguments to use as options.
     *
     * When a script is ran in multiple workspace packages, each context should have a different root,
     * but we can't modify the context without changing the reference across all packages.
     * So create a new context, copy over the old properties, and set the new root.
     */
    execute(oldContext: ScriptContext, script: Script): Promise<unknown>;
    /**
     * Add the enqueued tasks to the routine so they show in the console,
     * and then run using the defined process.
     */
    runScriptTasks(args: Arguments, type: ExecuteType, tasks: Task<ScriptContext>[]): Promise<unknown>;
}
//# sourceMappingURL=ExecuteScriptRoutine.d.ts.map