"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@boost/common");
const core_1 = require("@boost/core");
const yargs_parser_1 = __importDefault(require("yargs-parser"));
const formatExecReturn_1 = __importDefault(require("../../utils/formatExecReturn"));
class ExecuteScriptRoutine extends core_1.Routine {
    blueprint({ string }) {
        return {
            packageRoot: string(),
        };
    }
    /**
     * Run the script while also parsing arguments to use as options.
     *
     * When a script is ran in multiple workspace packages, each context should have a different root,
     * but we can't modify the context without changing the reference across all packages.
     * So create a new context, copy over the old properties, and set the new root.
     */
    execute(oldContext, script) {
        return __awaiter(this, void 0, void 0, function* () {
            const context = oldContext.clone();
            // Set the context so tasks inherit it
            this.setContext(context);
            // Update the cwd to point to the package root
            if (this.options.packageRoot) {
                context.cwd = new common_1.Path(this.options.packageRoot);
            }
            const { argv } = context;
            this.debug('Executing script with args "%s"', argv.join(' '));
            yield script.onBeforeExecute.emit([context, argv]);
            const args = yargs_parser_1.default(argv, script.args());
            let result = null;
            try {
                result = yield script.execute(context, args);
                // Queue and run sub-tasks
                const queue = result;
                if (typeof queue === 'object' && queue && queue.type && Array.isArray(queue.tasks)) {
                    result = yield this.runScriptTasks(args, queue.type, queue.tasks);
                }
                this.debug('  Success: %o', formatExecReturn_1.default(result));
                yield script.onAfterExecute.emit([context, result]);
            }
            catch (error) {
                this.debug('  Failure: %o', formatExecReturn_1.default(error));
                this.debug('  Error message: %s', error.message);
                yield script.onFailedExecute.emit([context, error]);
                throw error;
            }
            return result;
        });
    }
    /**
     * Add the enqueued tasks to the routine so they show in the console,
     * and then run using the defined process.
     */
    runScriptTasks(args, type, tasks) {
        return __awaiter(this, void 0, void 0, function* () {
            tasks.forEach((task) => {
                this.task(task.title, task.action, this.context.script);
            });
            switch (type) {
                case 'parallel':
                    return this.parallelizeTasks(args);
                case 'pool':
                    return this.poolTasks(args);
                case 'serial':
                    return this.serializeTasks(args);
                case 'sync':
                    return this.synchronizeTasks(args);
                default:
                    throw new Error(this.tool.msg('errors:executeTypeUnknown', { type }));
            }
        });
    }
}
exports.default = ExecuteScriptRoutine;
