"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const hygen_1 = require("hygen");
// @ts-ignore
const logger_1 = __importDefault(require("hygen/lib/logger"));
const common_1 = require("@boost/common");
const core_1 = require("@boost/core");
class ScaffoldRoutine extends core_1.Routine {
    constructor() {
        super(...arguments);
        /**
         * Handle shell executions from hygen.
         */
        this.handleExec = (action, input) => this.executeCommand(action, [], {
            input,
            shell: true,
        });
        /**
         * Pipe a message from hygen to boost.
         */
        this.handleLog = (message) => {
            if (message && message.trim()) {
                this.tool.console.log(message);
            }
        };
        /**
         * Temporary solution until boost supports prompts.
         */
        this.handlePrompt = () => Promise.resolve({ overwrite: true });
    }
    bootstrap() {
        this.task(this.tool.msg('app:scaffoldRunGenerator'), this.runGenerator);
    }
    execute(context) {
        return this.serializeTasks(this.tool.config.module);
    }
    /**
     * Execute the hygen scaffolding generator.
     */
    runGenerator(context, moduleName) {
        return __awaiter(this, void 0, void 0, function* () {
            const { tool } = this;
            const args = [context.generator, context.action];
            const searchName = moduleName.includes('/') ? moduleName.split('/')[1] : moduleName;
            let modulePath = require.resolve(moduleName);
            // Index files may be nested, so we need to slice and work around it
            modulePath = modulePath.slice(0, modulePath.lastIndexOf(searchName) + searchName.length);
            try {
                return yield hygen_1.engine(context.argv, {
                    // @ts-ignore Broken upstream
                    createPrompter: /* istanbul ignore next */ () => ({ prompt: this.handlePrompt }),
                    cwd: tool.options.root,
                    debug: tool.config.debug,
                    exec: this.handleExec,
                    logger: new logger_1.default(this.handleLog),
                    templates: new common_1.Path(modulePath, 'templates').path(),
                });
            }
            catch (error) {
                // Intercept hygen error to provide a better error message
                if (error.message.startsWith("I can't find action")) {
                    throw new Error(this.tool.msg('errors:scaffoldNoTemplates', { path: args.join('/') }));
                }
                throw error;
            }
        });
    }
}
exports.default = ScaffoldRoutine;
