import { Routine, WorkspacePackageConfig } from '@boost/core';
import Beemo from '../Beemo';
import Context from '../contexts/Context';
export interface RunInWorkspacesContextArgs {
    concurrency: number;
    graph: boolean;
    workspaces: string;
}
export default abstract class RunInWorkspacesRoutine<Ctx extends Context<RunInWorkspacesContextArgs>> extends Routine<Ctx, Beemo> {
    workspacePackages: WorkspacePackageConfig[];
    bootstrap(): void;
    execute(context: Ctx): Promise<unknown>;
    /**
     * When a list of errors are available, concatenate them and throw a new error.
     */
    formatAndThrowErrors(errors: Error[]): void;
    /**
     * Return a list of workspaces optionally filtered.
     */
    getFilteredWorkspacePackages(): WorkspacePackageConfig[];
    /**
     * Group routines in order of which they are dependend on.
     */
    orderByWorkspacePriorityGraph(): Routine<Ctx, Beemo>[][];
    /**
     * Pipe a routine for the entire project or a workspace package at the defined path.
     */
    abstract pipeRoutine(packageName?: string, packageRoot?: string): void;
}
//# sourceMappingURL=RunInWorkspacesRoutine.d.ts.map