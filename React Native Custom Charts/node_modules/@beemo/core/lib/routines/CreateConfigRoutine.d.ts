import { Path } from '@boost/common';
import { Routine, Predicates } from '@boost/core';
import Beemo from '../Beemo';
import Driver from '../Driver';
import ConfigContext from '../contexts/ConfigContext';
export interface ConfigObject {
    [key: string]: unknown;
}
export interface CreateConfigOptions {
    driver: Driver;
}
export default class CreateConfigRoutine<Ctx extends ConfigContext> extends Routine<Ctx, Beemo, CreateConfigOptions> {
    blueprint({ instance }: Predicates): any;
    bootstrap(): void;
    execute(): Promise<ConfigObject[]>;
    /**
     * Copy configuration file from module.
     */
    copyConfigFile(context: Ctx): Promise<Path>;
    /**
     * Create a temporary configuration file or pass as an option.
     */
    createConfigFile(context: Ctx, config: object): Promise<Path>;
    /**
     * Extract configuration from "beemo.<driver>" within the local project's package.json.
     */
    extractConfigFromPackage(context: Ctx, prevConfigs: ConfigObject[]): Promise<ConfigObject[]>;
    /**
     * Return file name camel cased.
     */
    getConfigName(name: string): string;
    /**
     * Return absolute file path for config file within configuration module,
     * or an empty string if it does not exist.
     */
    getConfigPath(forceLocal?: boolean): Path | null;
    /**
     * Merge multiple configuration sources using the current driver.
     */
    mergeConfigs(context: Ctx, configs: ConfigObject[]): Promise<ConfigObject>;
    /**
     * Load a config file with passing the args and tool to the file.
     */
    loadConfig(filePath: Path): ConfigObject;
    /**
     * Load config from the provider configuration module
     * and from the local configs/ folder in the consumer.
     */
    loadConfigFromSources(context: Ctx, prevConfigs: ConfigObject[]): Promise<ConfigObject[]>;
    /**
     * Reference configuration file from module using a require statement.
     */
    referenceConfigFile(context: Ctx): Promise<Path>;
    /**
     * Set environment variables defined by the driver.
     */
    setEnvVars(context: Ctx, configs: ConfigObject[]): Promise<ConfigObject[]>;
}
//# sourceMappingURL=CreateConfigRoutine.d.ts.map