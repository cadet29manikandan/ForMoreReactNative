"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@boost/core");
const chalk_1 = __importDefault(require("chalk"));
const fs_extra_1 = __importDefault(require("fs-extra"));
class CleanupConfigsRoutine extends core_1.Routine {
    bootstrap() {
        this.task(this.tool.msg('app:configCleanup'), this.deleteConfigFiles);
    }
    /**
     * Delete all temporary config files.
     */
    deleteConfigFiles(context) {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.all(context.configPaths.map((config) => {
                this.debug('Deleting config file %s', chalk_1.default.cyan(config.path));
                this.tool
                    .getPlugin('driver', config.driver)
                    .onDeleteConfigFile.emit([context, config.path]);
                return fs_extra_1.default.remove(config.path.path()).then(() => true);
            }));
        });
    }
}
exports.default = CleanupConfigsRoutine;
