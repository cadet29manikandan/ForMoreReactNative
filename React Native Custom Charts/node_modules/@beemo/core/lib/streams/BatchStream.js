"use strict";
/* eslint-disable no-underscore-dangle */
Object.defineProperty(exports, "__esModule", { value: true });
const stream_1 = require("stream");
const WAIT_THRESHOLD = 500;
class BatchStream extends stream_1.Transform {
    constructor(options = {}) {
        super();
        this.bufferedBatch = null;
        this.timeout = null;
        this.waitThreshold = 0;
        this.waitThreshold = options.wait || WAIT_THRESHOLD;
    }
    flush() {
        if (this.bufferedBatch) {
            this.push(this.bufferedBatch);
            this.bufferedBatch = null;
        }
        if (this.timeout) {
            clearTimeout(this.timeout);
            this.timeout = null;
        }
    }
    _transform(chunk, encoding, callback) {
        if (this.bufferedBatch) {
            this.bufferedBatch = Buffer.concat([this.bufferedBatch, chunk]);
        }
        else {
            this.bufferedBatch = chunk;
        }
        if (this.timeout) {
            clearTimeout(this.timeout);
        }
        this.timeout = setTimeout(() => {
            this.flush();
        }, this.waitThreshold);
        callback();
    }
    _flush(callback) {
        this.flush();
        callback();
    }
}
exports.default = BatchStream;
