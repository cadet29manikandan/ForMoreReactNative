import { Path } from '@boost/common';
import { Plugin, Predicates } from '@boost/core';
import { Event, ConcurrentEvent } from '@boost/event';
import DriverContext from './contexts/DriverContext';
import ConfigContext from './contexts/ConfigContext';
import { Argv, DriverCommandOptions, DriverOptions, DriverMetadata, Execution, ExecutionError } from './types';
export default abstract class Driver<Config extends object = {}, Options extends DriverOptions = DriverOptions> extends Plugin<Options> {
    command: DriverCommandOptions;
    config: Config;
    metadata: DriverMetadata;
    onLoadModuleConfig: Event<[ConfigContext<import("./contexts/ConfigContext").ConfigArgs>, Path, Config], string>;
    onLoadPackageConfig: Event<[ConfigContext<import("./contexts/ConfigContext").ConfigArgs>, Config], string>;
    onMergeConfig: Event<[ConfigContext<import("./contexts/ConfigContext").ConfigArgs>, Config], string>;
    onCreateConfigFile: Event<[ConfigContext<import("./contexts/ConfigContext").ConfigArgs>, Path, Config], string>;
    onCopyConfigFile: Event<[ConfigContext<import("./contexts/ConfigContext").ConfigArgs>, Path, Config], string>;
    onReferenceConfigFile: Event<[ConfigContext<import("./contexts/ConfigContext").ConfigArgs>, Path, Config], string>;
    onDeleteConfigFile: Event<[ConfigContext<import("./contexts/ConfigContext").ConfigArgs>, Path], string>;
    onBeforeExecute: ConcurrentEvent<[DriverContext<import("./contexts/DriverContext").DriverArgs>, Argv], string>;
    onAfterExecute: ConcurrentEvent<[DriverContext<import("./contexts/DriverContext").DriverArgs>, unknown], string>;
    onFailedExecute: ConcurrentEvent<[DriverContext<import("./contexts/DriverContext").DriverArgs>, Error], string>;
    blueprint(predicates: Predicates): any;
    /**
     * Special case for merging arrays.
     */
    doMerge(prevValue: unknown, nextValue: unknown): unknown;
    /**
     * Extract the error message when the driver fails to execute.
     */
    extractErrorMessage(error: ExecutionError): string;
    /**
     * Format the configuration file before it's written.
     */
    formatConfig(data: Config): string;
    /**
     * Return a list of user defined arguments.
     */
    getArgs(): Argv;
    /**
     * Return a list of dependent drivers.
     */
    getDependencies(): string[];
    /**
     * Return a list of supported CLI options.
     */
    getSupportedOptions(): string[];
    /**
     * Extract the current version of the installed driver via its binary.
     */
    getVersion(): string;
    /**
     * Merge multiple configuration objects.
     */
    mergeConfig(prev: Config, next: Config): Config;
    /**
     * Handle command failures according to this driver.
     */
    processFailure(error: Execution): void;
    /**
     * Handle successful commands according to this driver.
     */
    processSuccess(response: Execution): void;
    /**
     * Setup additional command options.
     */
    setCommandOptions(options: DriverCommandOptions): this;
    /**
     * Set metadata about the binary/executable in which this driver wraps.
     */
    setMetadata(metadata: Partial<DriverMetadata>): this;
}
//# sourceMappingURL=Driver.d.ts.map