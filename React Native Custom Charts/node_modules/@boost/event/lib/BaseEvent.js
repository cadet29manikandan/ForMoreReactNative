"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const internal_1 = require("@boost/internal");
const constants_1 = require("./constants");
class BaseEvent {
    constructor(name) {
        this.listeners = new Map();
        this.name = this.validateName(name, 'name');
        constants_1.debug('New %S created: %s', this.constructor.name, name);
    }
    /**
     * Remove all listeners from the event.
     */
    clearListeners(scope) {
        if (scope) {
            this.getListeners(scope).clear();
        }
        else {
            this.listeners.clear();
        }
        return this;
    }
    /**
     * Return a set of listeners for a specific event scope.
     */
    getListeners(scope) {
        const key = this.validateName(scope || constants_1.WILDCARD_SCOPE, 'scope');
        if (!this.listeners.has(key)) {
            this.listeners.set(key, new Set());
        }
        return this.listeners.get(key);
    }
    /**
     * Return a list of all scopes with listeners.
     */
    getScopes() {
        return Array.from(this.listeners.keys());
    }
    /**
     * Register a listener to the event.
     */
    listen(listener, scope) {
        constants_1.debug('Registering "%s" listener', this.name);
        this.getListeners(scope).add(this.validateListener(listener));
        return this;
    }
    /**
     * Register a listener to the event that only triggers once.
     */
    once(listener, scope) {
        const func = this.validateListener(listener);
        const handler = ((...args) => {
            this.unlisten(handler);
            return func(...args);
        });
        return this.listen(handler, scope);
    }
    /**
     * Remove a listener from the event.
     */
    unlisten(listener, scope) {
        constants_1.debug('Unregistering "%s" listener', this.name);
        this.getListeners(scope).delete(listener);
        return this;
    }
    /**
     * Validate the listener is a function.
     */
    validateListener(listener) {
        if (typeof listener !== 'function') {
            throw new internal_1.RuntimeError('event', 'EV_INVALID_LISTENER', [this.name]);
        }
        return listener;
    }
    /**
     * Validate the name/scope match a defined pattern.
     */
    validateName(name, type) {
        if (type === 'scope' && name === constants_1.WILDCARD_SCOPE) {
            return name;
        }
        if (!name.match(constants_1.EVENT_NAME_PATTERN)) {
            throw new internal_1.RuntimeError('event', 'EV_INVALID_NAME', [type, name]);
        }
        return name;
    }
}
exports.default = BaseEvent;
