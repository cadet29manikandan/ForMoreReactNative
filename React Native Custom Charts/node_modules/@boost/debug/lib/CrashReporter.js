"use strict";
/* eslint-disable no-magic-numbers */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const execa_1 = __importDefault(require("execa"));
const fast_glob_1 = __importDefault(require("fast-glob"));
const common_1 = require("@boost/common");
const constants_1 = require("./constants");
function run(command, args) {
    return String(execa_1.default.sync(command, args, { preferLocal: true }).stdout);
}
function resolveHome(filePath) {
    return filePath.replace(process.env.HOME, '~');
}
function extractVersion(value) {
    const match = value.match(/\d+\.\d+\.\d+([.-a-z0-9])?/u);
    return match ? match[0] : '';
}
class CrashReporter {
    constructor() {
        this.contents = '';
    }
    /**
     * Add a label with a value, or multiple values, to the last added section.
     */
    add(label, ...messages) {
        this.contents += `${label}:\n`;
        this.contents += `  ${messages.map(String).join(' - ')}\n`;
        return this;
    }
    /**
     * Start a new section with a title.
     */
    addSection(title) {
        this.contents += `\n${title.toUpperCase()}\n`;
        this.contents += `${'='.repeat(title.length)}\n\n`;
        constants_1.debug('Reporting crash with %s', title);
        return this;
    }
    /**
     * Report Node.js related binary versions and paths.
     */
    reportBinaries() {
        this.addSection('Binaries');
        const bins = {
            node: 'Node',
            npm: 'NPM',
            yarn: 'Yarn',
        };
        Object.keys(bins).forEach(bin => {
            try {
                this.add(bins[bin], extractVersion(run(bin, ['--version'])), resolveHome(run('which', [bin])));
            }
            catch (_a) {
                // Ignore
            }
        });
        return this;
    }
    /**
     * Report all environment variables.
     */
    reportEnvVars() {
        this.addSection('Environment');
        const keys = Object.keys(process.env).sort();
        keys.forEach(key => {
            this.add(key, process.env[key]);
        });
        return this;
    }
    /**
     * Report common programming language versions and paths
     */
    reportLanguages() {
        this.addSection('Languages');
        const languages = {
            bash: 'Bash',
            go: 'Go',
            javac: 'Java',
            perl: 'Perl',
            php: 'PHP',
            python: 'Python',
            ruby: 'Ruby',
            rustup: 'Rust',
        };
        // When running on OSX and Java is not installed,
        // OSX will interrupt the process with a prompt to install Java.
        // This is super annoying, so let's not disrupt consumers.
        // istanbul ignore next
        if (os_1.default.platform() === 'darwin') {
            delete languages.javac;
        }
        Object.keys(languages).forEach(bin => {
            let version;
            try {
                version = extractVersion(run(bin, ['--version']));
                if (!version) {
                    version = extractVersion(run(bin, ['version']));
                }
            }
            catch (_a) {
                // Ignore
            }
            if (version) {
                this.add(languages[bin], version, resolveHome(run('which', [bin])));
            }
        });
        return this;
    }
    /**
     * Report information about the current `process`.
     */
    reportProcess() {
        this.addSection('Process');
        this.add('ID', process.pid);
        this.add('Title', process.title);
        this.add('Timestamp', new Date().toISOString());
        this.add('CWD', process.cwd());
        this.add('ARGV', process.argv.map(v => `- ${v}`).join('\n  '));
        return this;
    }
    /**
     * Report the stack trace for a defined `Error`.
     */
    reportStackTrace(error) {
        this.addSection('Stack Trace');
        this.contents += error.stack;
        this.contents += '\n';
        return this;
    }
    /**
     * Report information about the platform and operating system.
     */
    reportSystem() {
        this.addSection('System');
        this.add('OS', os_1.default.platform());
        this.add('Architecture', os_1.default.arch());
        this.add('CPUs', os_1.default.cpus().length);
        this.add('Uptime (sec)', os_1.default.uptime());
        this.add('Memory usage', `${Math.round((process.memoryUsage().heapUsed / 1024 / 1024) * 100) / 100} MB`);
        // istanbul ignore next
        if (process.platform !== 'win32') {
            this.add('Group ID', process.getgid());
            this.add('User ID', process.getuid());
        }
        return this;
    }
    /**
     * Report NPM package versions for all that match the defined pattern.
     * Only searches in the root node modules folder.
     */
    reportPackageVersions(patterns, title = 'Packages') {
        this.addSection(title);
        const map = new Map();
        fast_glob_1.default
            .sync(common_1.toArray(patterns).map(pattern => path_1.default.join('./node_modules', pattern)), {
            absolute: true,
            onlyDirectories: true,
            onlyFiles: false,
        })
            .forEach(pkgPath => {
            const pkg = common_1.requireModule(path_1.default.join(pkgPath, 'package.json'));
            map.set(pkg.name, pkg.version);
        });
        map.forEach((version, name) => {
            this.add(name, version);
        });
        return this;
    }
    /**
     * Write the reported content to the defined file path.
     */
    write(filePath) {
        fs_1.default.writeFileSync(String(filePath), this.contents.trim(), 'utf8');
        return this;
    }
}
exports.default = CrashReporter;
