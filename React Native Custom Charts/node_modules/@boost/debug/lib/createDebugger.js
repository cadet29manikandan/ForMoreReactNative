"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const common_1 = require("@boost/common");
const internal_1 = require("@boost/internal");
const constants_1 = require("./constants");
function createDebugger(namespace) {
    const globalNamespace = internal_1.env('DEBUG_GLOBAL_NAMESPACE');
    const namespaces = common_1.toArray(namespace);
    if (globalNamespace) {
        namespaces.unshift(globalNamespace);
    }
    const mainNamespace = namespaces.join(':');
    constants_1.debug('New debugger created: %s %s', mainNamespace, internal_1.env('DEBUG_VERBOSE') ? '(verbose enabled)' : '');
    const logger = debug_1.default(mainNamespace);
    // `debug` doesn't support this on an individual namespace basis,
    // so we have to manually support it using this hacky regex.
    logger.disable = () => {
        constants_1.debug('Debugger %s disabled', mainNamespace);
        process.env.DEBUG = (process.env.DEBUG || '')
            .replace(new RegExp(`${logger.namespace}(:\\*)?`, 'u'), '')
            .replace(/(^,)|(,$)/u, '')
            .replace(',,', ',');
    };
    logger.enable = () => {
        constants_1.debug('Debugger %s enabled', mainNamespace);
        debug_1.default.enable(mainNamespace);
    };
    logger.invariant = (condition, message, pass, fail) => {
        logger('%s: %s', message, condition ? internal_1.color.pass(pass) : internal_1.color.fail(fail));
    };
    logger.verbose = (message, ...args) => {
        if (internal_1.env('DEBUG_VERBOSE')) {
            logger(message, ...args);
        }
    };
    return logger;
}
exports.default = createDebugger;
