"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = __importDefault(require("util"));
const chalk_1 = __importDefault(require("chalk"));
const internal_1 = require("@boost/internal");
const isAllowedLogLevel_1 = __importDefault(require("./isAllowedLogLevel"));
const constants_1 = require("./constants");
exports.DEFAULT_LABELS = {
    debug: chalk_1.default.gray(constants_1.msg('log:levelDebug')),
    error: chalk_1.default.red(constants_1.msg('log:levelError')),
    info: chalk_1.default.cyan(constants_1.msg('log:levelInfo')),
    trace: chalk_1.default.magenta(constants_1.msg('log:levelTrace')),
    warn: chalk_1.default.yellow(constants_1.msg('log:levelWarn')),
};
function createLogger({ labels = {}, stderr = process.stderr, stdout = process.stdout, } = {}) {
    let silent = false;
    {
        const defaultLevel = internal_1.env('LOG_DEFAULT_LEVEL');
        const maxLevel = internal_1.env('LOG_MAX_LEVEL');
        constants_1.debug('New logger created: %s %s', defaultLevel ? `${defaultLevel} level` : 'all levels', maxLevel ? `(max ${maxLevel})` : '');
    }
    function logger(message, ...args) {
        const self = logger;
        const defaultLevel = internal_1.env('LOG_DEFAULT_LEVEL');
        if (defaultLevel && self[defaultLevel]) {
            self[defaultLevel](message, ...args);
        }
        else {
            self.log(message, ...args);
        }
    }
    constants_1.LOG_LEVELS.forEach(level => {
        const label = labels[level] || exports.DEFAULT_LABELS[level] || '';
        const stream = level === 'debug' || level === 'error' || level === 'warn' ? stderr : stdout;
        Object.defineProperty(logger, level, {
            value: function log(message, ...args) {
                const maxLevel = internal_1.env('LOG_MAX_LEVEL');
                if (!silent && isAllowedLogLevel_1.default(level, maxLevel)) {
                    const output = util_1.default.format(message, ...args);
                    stream.write(level === 'log' ? `${output}\n` : `${label} ${output}\n`);
                }
            },
        });
    });
    logger.enable = () => {
        constants_1.debug('Logger enabled');
        silent = false;
    };
    logger.disable = () => {
        constants_1.debug('Logger disabled');
        silent = true;
    };
    return logger;
}
exports.default = createLogger;
